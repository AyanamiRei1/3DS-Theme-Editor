<Window x:Class="ThemeEditor.WPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:wpfx="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:controls="clr-namespace:ThemeEditor.WPF.Controls"
        xmlns:local="clr-namespace:ThemeEditor.WPF"
        xmlns:system="clr-namespace:System;assembly=mscorlib"
        xmlns:templating="clr-namespace:ThemeEditor.WPF.Templating"
        xmlns:locale="clr-namespace:ThemeEditor.WPF.Localization"
        xmlns:themes="clr-namespace:ThemeEditor.WPF.Themes"

        SnapsToDevicePixels="True" UseLayoutRounding="True"
        ResizeMode="CanMinimize"


        Loaded="MainWindow_OnLoaded"

        mc:Ignorable="d" Height="600" Width="1024"
        d:DataContext="{d:DesignInstance local:MainWindow}">
    <Window.Title>
        <Binding RelativeSource="{RelativeSource Self}" Path="ThemePath"
                 TargetNullValue="{x:Static local:MainWindow.WINDOW_TITLE}"
                 StringFormat="{x:Static  local:MainWindow.WINDOW_TITLE_FORMAT}" />
    </Window.Title>
    <Window.Resources>
        <templating:PropertyListConverter x:Key="ViewModelUnroller" />
        <templating:DynamicTemplateSelector x:Key="TemplateSelector" />
        <Style x:Key="PropertyListControlStyle" TargetType="ItemsControl">
            <Style.Resources>
                <themes:ColorItemConverter x:Key="ColorItemConverter" />
                <Style TargetType="{x:Type wpfx:ColorPicker}">
                    <Setter Property="AvailableColorsHeader"
                            Value="{x:Static locale:MainResources.Control_ColorPicker_TopPalette}" />
                    <Setter Property="AvailableColors">
                        <Setter.Value>
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=Window}"
                                     Converter="{StaticResource ColorItemConverter}"
                                     Path="ViewModel.Textures.Top.Palette" />
                        </Setter.Value>
                    </Setter>
                    <Setter Property="StandardColorsHeader"
                            Value="{x:Static locale:MainResources.Control_ColorPicker_BottomPalette}" />
                    <Setter Property="StandardColors">
                        <Setter.Value>
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=Window}"
                                     Converter="{StaticResource ColorItemConverter}"
                                     Path="ViewModel.Textures.Bottom.Palette" />
                        </Setter.Value>
                    </Setter>
                </Style>
            </Style.Resources>
            <Setter Property="ItemTemplateSelector" Value="{StaticResource TemplateSelector}" />
            <Setter Property="templating:DynamicTemplateSelector.Templates">
                <Setter.Value>
                    <templating:TemplateCollection>
                        <templating:Template PropertyName="Value" PropertyType="{x:Type Color}"
                                             DataTemplate="{StaticResource ColorDataTemplate}" />
                        <templating:Template PropertyName="Value" PropertyType="{x:Type system:Double}"
                                             DataTemplate="{StaticResource FloatDataTemplate}" />
                    </templating:TemplateCollection>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="PropertyControlStyle" TargetType="ContentControl">
            <Setter Property="ContentTemplateSelector" Value="{StaticResource TemplateSelector}" />
            <Setter Property="templating:DynamicTemplateSelector.Templates">
                <Setter.Value>
                    <templating:TemplateCollection>
                        <templating:Template PropertyName="Value" PropertyType="{x:Type system:Boolean}"
                                             DataTemplate="{StaticResource BoolDataTemplate}" />
                        <templating:Template PropertyName="Value" PropertyType="{x:Type system:Enum}"
                                             DataTemplate="{StaticResource EnumDataTemplate}" />
                    </templating:TemplateCollection>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ColorsViewModelControlStyle" TargetType="ItemsControl">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate DataType="{x:Type templating:PropertyListConverter+PropertyProxy}">
                        <StackPanel Margin="3,0">
                            <TextBlock FontWeight="Bold" Text="{Binding Path=Name}" />
                            <TextBlock FontStyle="Italic" Text="{Binding Path=Description}" />
                            <StackPanel>
                                <ItemsControl
                                    ItemsSource="{Binding Converter={StaticResource ViewModelUnroller}, Path=Value}"
                                    Style="{StaticResource PropertyListControlStyle}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel>
                                                <WrapPanel.Width>
                                                    <Binding Path="ViewportWidth"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ScrollViewer}" />
                                                </WrapPanel.Width>
                                            </WrapPanel>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </StackPanel>
                            <Separator Margin="3" />
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="FlagsItemsControlStyle" TargetType="ItemsControl">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate DataType="{x:Type templating:PropertyListConverter+PropertyProxy}">
                        <StackPanel Margin="3,0">
                            <UniformGrid Columns="2">
                                <TextBlock FontWeight="Bold" Text="{Binding Path=Name}" TextWrapping="Wrap"
                                           VerticalAlignment="Center" />
                                <ContentControl Style="{StaticResource PropertyControlStyle}"
                                                Content="{Binding Path=.}">
                                    <ContentControl.ToolTip>
                                        <TextBlock FontStyle="Italic" Text="{Binding Path=Description}"
                                                   TextWrapping="Wrap" />
                                    </ContentControl.ToolTip>
                                </ContentControl>
                            </UniformGrid>
                            <Separator Margin="3" />
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="1">
                            <UniformGrid.Width>
                                <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType=ScrollViewer}"
                                         Path="ViewportWidth" />
                            </UniformGrid.Width>
                        </UniformGrid>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ImageBrush x:Key="NoiseBackground" ImageSource="/ThemeEditor.WPF;component/Resources/BLACK_NOISE.png"
                    TileMode="Tile" Viewbox="0,0,48,48" ViewboxUnits="Absolute" Viewport="0,0,48,48"
                    ViewportUnits="Absolute" />
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Command="{Binding Path=LoadThemeCommandWrapper.Command}"
                    Key="{Binding Path=LoadThemeCommandWrapper.Gesture.Key}"
                    Modifiers="{Binding Path=LoadThemeCommandWrapper.Gesture.Modifiers}" />
        <KeyBinding Command="{Binding Path=SaveThemeCommandWrapper.Command}"
                    Key="{Binding Path=SaveThemeCommandWrapper.Gesture.Key}"
                    Modifiers="{Binding Path=SaveThemeCommandWrapper.Gesture.Modifiers}" />
        <KeyBinding Command="{Binding Path=SaveAsThemeCommandWrapper.Command}"
                    Key="{Binding Path=SaveAsThemeCommandWrapper.Gesture.Key}"
                    Modifiers="{Binding Path=SaveAsThemeCommandWrapper.Gesture.Modifiers}" />
        <KeyBinding Command="{Binding Path=NewThemeCommandWrapper.Command}"
                    Key="{Binding Path=NewThemeCommandWrapper.Gesture.Key}"
                    Modifiers="{Binding Path=NewThemeCommandWrapper.Gesture.Modifiers}" />
    </Window.InputBindings>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="428" />
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Menu Grid.Row="0">
                <MenuItem Header="{x:Static locale:MainResources.Menu_File}">
                    <MenuItem Header="{x:Static locale:MainResources.Menu_File_New}"
                              Command="{Binding Path=NewThemeCommandWrapper.Command}"
                              InputGestureText="{Binding Path=NewThemeCommandWrapper.GestureText}" />
                    <MenuItem Header="{x:Static locale:MainResources.Menu_File_Open}"
                              Command="{Binding Path=LoadThemeCommandWrapper.Command}"
                              InputGestureText="{Binding Path=LoadThemeCommandWrapper.GestureText}" />
                    <MenuItem Header="{x:Static locale:MainResources.Menu_File_Save}"
                              Command="{Binding Path=SaveThemeCommandWrapper.Command}"
                              InputGestureText="{Binding Path=SaveThemeCommandWrapper.GestureText}" />
                    <MenuItem Header="{x:Static locale:MainResources.Menu_File_SaveAs}"
                              Command="{Binding Path=SaveAsThemeCommandWrapper.Command}"
                              InputGestureText="{Binding Path=SaveAsThemeCommandWrapper.GestureText}" />
                </MenuItem>
                <MenuItem Header="{x:Static locale:MainResources.Menu_Image}">
                    <MenuItem.Resources>
                        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                        <Style x:Key="ImportStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="Header" Value="{x:Static locale:MainResources.Menu_Image_Any_Load}" />
                            <Setter Property="Command" Value="{Binding Path=ReplaceImageCommand}" />
                        </Style>
                        <Style x:Key="RemoveStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="Header" Value="{x:Static locale:MainResources.Menu_Image_Any_Remove}" />
                            <Setter Property="Command" Value="{Binding Path=RemoveImageCommand}" />
                            <Setter Property="Visibility">
                                <Setter.Value>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="IsEnabled"
                                             Converter="{StaticResource BooleanToVisibilityConverter}" />
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Style x:Key="ExportStyle" TargetType="{x:Type MenuItem}">
                            <Setter Property="Header" Value="{x:Static locale:MainResources.Menu_Image_Any_Export}" />
                            <Setter Property="Command" Value="{Binding Path=ExportImageCommand}" />
                            <Setter Property="Visibility">
                                <Setter.Value>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="IsEnabled"
                                             Converter="{StaticResource BooleanToVisibilityConverter}" />
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </MenuItem.Resources>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_Top}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.Top}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.Top}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.Top}" />
                    </MenuItem>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_TopStatic}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.TopAlt}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.TopAlt}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.TopAlt}" />
                    </MenuItem>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_Bottom}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.Bottom}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.Bottom}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.Bottom}" />
                    </MenuItem>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_FileLarge}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FileLarge}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FileLarge}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FileLarge}" />
                    </MenuItem>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_FileSmall}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FileSmall}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FileSmall}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FileSmall}" />
                    </MenuItem>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_FolderOpen}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FolderOpen}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FolderOpen}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FolderOpen}" />
                    </MenuItem>
                    <MenuItem Header="{x:Static locale:MainResources.Menu_Image_FolderClosed}">
                        <MenuItem Style="{StaticResource ImportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FolderClosed}" />
                        <MenuItem Style="{StaticResource RemoveStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FolderClosed}" />
                        <MenuItem Style="{StaticResource ExportStyle}"
                                  CommandParameter="{x:Static local:TargetImage.FolderClosed}" />
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="About"
                          Command="{Binding Path=AboutCommand}" />
            </Menu>
            <TabControl Grid.Row="1">
                <TabItem Header="{x:Static locale:MainResources.Tab_Colors}">
                    <ScrollViewer HorizontalScrollBarVisibility="Hidden">
                        <ItemsControl
                            ItemsSource="{Binding Path=ViewModel.Colors, Converter={StaticResource ViewModelUnroller}}"
                            Style="{StaticResource ColorsViewModelControlStyle}" />
                    </ScrollViewer>
                </TabItem>
                <TabItem Header="{x:Static locale:MainResources.Tab_Flags}">
                    <ScrollViewer HorizontalScrollBarVisibility="Hidden">
                        <ItemsControl
                            ItemsSource="{Binding Path=ViewModel.Flags, Converter={StaticResource ViewModelUnroller}}"
                            Style="{StaticResource FlagsItemsControlStyle}" />
                    </ScrollViewer>
                </TabItem>
            </TabControl>
            <wpfx:BusyIndicator Grid.Row="1" IsBusy="{Binding Path=IsBusy}" BusyContent="{Binding Path=BusyText}" />
        </Grid>
        <!-- Preview -->
        <Grid Grid.Column="1" Background="{StaticResource NoiseBackground}" x:Name="grid_Preview">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="240" />
                <RowDefinition Height="8" />
                <RowDefinition Height="240" />
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <StackPanel Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Horizontal">
                <ToggleButton x:Name="chk_AnimatePreview"
                              Content="{x:Static locale:MainResources.Preview_Animate}"
                              Padding="5" Margin="3" />
                <Separator Height="20" />
            </StackPanel>
            <StackPanel Grid.Row="4" VerticalAlignment="Center" HorizontalAlignment="Center" Orientation="Horizontal">
                <Button Content="{x:Static locale:MainResources.Control_AudioPlayer_Reload}" Padding="5" Margin="3"
                        Command="{Binding Path=ReloadBGMCommand}" />
                <Button Padding="5" Margin="3"
                        Command="{Binding Source={x:Static local:AudioPlayer.Instance}, Path=PlayCommand}">
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Content" Value="{x:Static locale:MainResources.Control_AudioPlayer_Play}" />
                            <Style.Triggers>
                                <DataTrigger
                                    Binding="{Binding Source={x:Static local:AudioPlayer.Instance}, Path=IsPlaying, UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="Content"
                                            Value="{x:Static locale:MainResources.Control_AudioPlayer_Pause}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <Button Content="{x:Static locale:MainResources.Control_AudioPlayer_Stop}" Padding="5" Margin="3"
                        Command="{Binding Source={x:Static local:AudioPlayer.Instance}, Path=StopCommand}" />
                <Slider Value="{Binding Source={x:Static local:AudioPlayer.Instance}, Path=Volume}"
                        VerticalAlignment="Center" Width="100" Maximum="1" Minimum="0"
                        SmallChange="0.05" AutoToolTipPlacement="BottomRight" AutoToolTipPrecision="2" />
            </StackPanel>
            <Border Grid.Row="1" AllowDrop="True"
                    local:DragDropBehaviour.DragEnterCommand="{Binding Path=DragImageCommand}"
                    local:DragDropBehaviour.DragDropCommand="{Binding Path=DropTopImageCommand}">
                <controls:TopScreenPreview x:Name="pre_TopScreen"
                                           Theme="{Binding Path=ViewModel}"
                                           IsEnabled="{Binding ElementName=chk_AnimatePreview, Path=IsChecked}" />
                <Border.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="6" />
                </Border.Effect>
            </Border>
            <Border Grid.Row="3" AllowDrop="True"
                    local:DragDropBehaviour.DragEnterCommand="{Binding Path=DragImageCommand}"
                    local:DragDropBehaviour.DragDropCommand="{Binding Path=DropBottomImageCommand}">
                <Grid HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="320" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <StackPanel Grid.Column="0" Margin="3">
                        <ToggleButton x:Name="chk_FolderView" Content="Folder" Padding="3" />
                    </StackPanel>
                    <Canvas Grid.Column="1" x:Name="pre_BottomScreen">
                        <controls:BottomScreenPreview HideCursor="{Binding ElementName=chk_FolderView, Path=IsChecked}"
                                                      Theme="{Binding Path=ViewModel}"
                                                      IsEnabled="{Binding ElementName=chk_AnimatePreview, Path=IsChecked}" />
                        <controls:BottomFolderPreview ShowFolder="{Binding ElementName=chk_FolderView, Path=IsChecked}"
                                                      Theme="{Binding Path=ViewModel}"
                                                      IsEnabled="{Binding ElementName=chk_AnimatePreview, Path=IsChecked}" />
                        <controls:BottomOverlaysPreview Theme="{Binding Path=ViewModel}"
                                                        IsEnabled="{Binding ElementName=chk_AnimatePreview, Path=IsChecked}" />
                    </Canvas>
                </Grid>
                <Border.Effect>
                    <DropShadowEffect ShadowDepth="0" BlurRadius="6" />
                </Border.Effect>
            </Border>
        </Grid>
    </Grid>
</Window>